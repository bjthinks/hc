import Test.HUnit

import MyMaybeT
import Parser
import Tokenizer
import Expression
import ExpressionParser
import ExpressionDisplay
import Command
import CommandParser
import Store

(tInt,tVar,tSum,tProd,tPower) = useThisVariableOnlyForTestingTheExpressionConstructors

tokenizerTests = [
  parseAll tokenizer ""        ~?= Right [(0,TokenEnd)],
  parseAll tokenizer "1"       ~?= Right [(0,TokenInteger 1),(1,TokenEnd)],
  parseAll tokenizer "123"     ~?= Right [(0,TokenInteger 123),(3,TokenEnd)],
  parseAll tokenizer " 1"      ~?= Right [(1,TokenInteger 1),(2,TokenEnd)],
  parseAll tokenizer "   456"  ~?= Right [(3,TokenInteger 456),(6,TokenEnd)],
  parseAll tokenizer " 1 2 3 " ~?= Right [(1,TokenInteger 1),(3,TokenInteger 2),(5,TokenInteger 3),(7,TokenEnd)],
  parseAll tokenizer "    345    5678   34    " ~?= Right [(4,TokenInteger 345),(11,TokenInteger 5678),(18,TokenInteger 34),(24,TokenEnd)],
  parseAll tokenizer "-"       ~?= Right [(0,TokenMinus),(1,TokenEnd)],
  parseAll tokenizer " - 9 "   ~?= Right [(1,TokenMinus),(3,TokenInteger 9),(5,TokenEnd)],
  parseAll tokenizer "---"     ~?= Right [(0,TokenMinus),(1,TokenMinus),(2,TokenMinus),(3,TokenEnd)],
  parseAll tokenizer "abc"     ~?= Right [(0,TokenWord "abc"),(3,TokenEnd)],
  parseAll tokenizer "ABC"     ~?= Right [(0,TokenWord "ABC"),(3,TokenEnd)],
  parseAll tokenizer "a23"     ~?= Right [(0,TokenWord "a23"),(3,TokenEnd)],
  parseAll tokenizer " a11 11" ~?= Right [(1,TokenWord "a11"),(5,TokenInteger 11),(7,TokenEnd)],
  parseAll tokenizer ":="      ~?= Right [(0,TokenAssign),(2,TokenEnd)],
  parseAll tokenizer "3-:=-3"  ~?= Right [(0,TokenInteger 3),(1,TokenMinus),(2,TokenAssign),(4,TokenMinus),(5,TokenInteger 3),(6,TokenEnd)],
  parseAll tokenizer "+"       ~?= Right [(0,TokenPlus),(1,TokenEnd)],
  parseAll tokenizer "("       ~?= Right [(0,TokenOpenParen),(1,TokenEnd)],
  parseAll tokenizer ")"       ~?= Right [(0,TokenCloseParen),(1,TokenEnd)],
  parseAll tokenizer "*"       ~?= Right [(0,TokenTimes),(1,TokenEnd)],
  parseAll tokenizer "^"       ~?= Right [(0,TokenPower),(1,TokenEnd)]
  ]

unRight :: Either a b -> b
unRight (Right b) = b
unRight _ = error "parse failed"

testEval str expr = parseAll expressionParser (map snd (unRight (parseAll tokenizer str))) ~?= Right expr

expressionParserTests = [
  testEval "4" (tInt 4),
  testEval "-8" (tInt (-8)),
  testEval "foo" $ tVar "foo",
  testEval "a+1" $ tSum [tInt 1,tVar "a"],
  testEval "a+b" $ tSum [tVar "a",tVar "b"],
  testEval "b+a" $ tSum [tVar "a",tVar "b"],
  testEval "a+1+1" $ tSum [tInt 2,tVar "a"],
  testEval "3+7+c+b+a+5+d+12" $ tSum [tInt 27,tVar "a",tVar "b",tVar "c",tVar "d"],
  testEval "a+0" $ tVar "a",
  testEval "0" $ tInt 0,
  testEval "0+0" $ tInt 0,
  testEval "(0)" $ tInt 0,
  testEval "(0+0)+(0+(0+0)+(0+0+(0+0))+0)+0" $ tInt 0,
  testEval "(1+1)+(1+(1+1)+(1+1+(1+1))+1)+1" $ tInt 11,
  testEval "(x+1)+y" $ tSum [tInt 1,tVar "x",tVar "y"],
  testEval "(x+1)+y+1" $ tSum [tInt 2,tVar "x",tVar "y"],
  testEval "x*y" $ tProd [tVar "x",tVar "y"],
  testEval "x*2" $ tProd [tInt 2,tVar "x"],
  testEval "x*(a+1)" $ tProd [tVar "x",tSum [tInt 1,tVar "a"]],
  testEval "x*(a+b)" $ tProd [tVar "x",tSum [tVar "a",tVar "b"]],
  testEval "x*(b+a)" $ tProd [tVar "x",tSum [tVar "a",tVar "b"]],
  testEval "x*(a+1+1)" $ tProd [tVar "x",tSum [tInt 2,tVar "a"]],
  testEval "x*(3+7+c+b+a+5+d+12)" $ tProd [tVar "x",tSum [tInt 27,tVar "a",tVar "b",tVar "c",tVar "d"]],
  testEval "x*(a+b+0)" $ tProd [tVar "x",tSum [tVar "a",tVar "b"]],
  testEval "x*(a+b+0+0)" $ tProd [tVar "x",tSum [tVar "a",tVar "b"]],
  testEval "x*(a+b+(0+0)+(0+(0+0)+(0+0+(0+0))+0)+0)" $ tProd[tVar "x",tSum [tVar "a",tVar "b"]],
  testEval "x*(a+(b+c))" $ tProd [tVar "x",tSum [tVar "a",tVar "b",tVar "c"]],
  testEval "a*b+c*d" $ tSum [tProd [tVar "a",tVar "b"],tProd [tVar "c",tVar "d"]],
  testEval "x*y+z" $ tSum [tProd [tVar "x",tVar "y"],tVar "z"],
  testEval "z+x*y" $ tSum [tProd [tVar "x",tVar "y"],tVar "z"],
  testEval "x*y+a" $ tSum [tVar "a",tProd [tVar "x",tVar "y"]],
  testEval "a+x*y" $ tSum [tVar "a",tProd [tVar "x",tVar "y"]],
  testEval "a*z+x" $ tSum [tProd [tVar "a",tVar "z"],tVar "x"],
  testEval "x+a*z" $ tSum [tProd [tVar "a",tVar "z"],tVar "x"],
  testEval "a*b+2*c" $ tSum [tProd [tVar "a",tVar "b"],tProd [tInt 2,tVar "c"]],
  testEval "c*2+a*b" $ tSum [tProd [tVar "a",tVar "b"],tProd [tInt 2,tVar "c"]],
  testEval "a*c+2*b" $ tSum [tProd [tVar "a",tVar "c"],tProd [tInt 2,tVar "b"]],
  testEval "b*2+a*c" $ tSum [tProd [tVar "a",tVar "c"],tProd [tInt 2,tVar "b"]],
  testEval "b*c+a*2" $ tSum [tProd [tInt 2,tVar "a"],tProd [tVar "b",tVar "c"]],
  testEval "2*a+b*c" $ tSum [tProd [tInt 2,tVar "a"],tProd [tVar "b",tVar "c"]],
  testEval "x*z+y*z+x*y+x*y*z" $ tSum [tProd [tVar "x",tVar "y",tVar "z"],
                                       tProd [tVar "x",tVar "y"],
                                       tProd [tVar "x",tVar "z"],
                                       tProd [tVar "y",tVar "z"]],
  testEval "z+y+x+x*z+y*z+x*y+x*y*z" $ tSum [tProd [tVar "x",tVar "y",tVar "z"],
                                             tProd [tVar "x",tVar "y"],
                                             tProd [tVar "x",tVar "z"],
                                             tVar "x",
                                             tProd [tVar "y",tVar "z"],
                                             tVar "y",tVar "z"],
  testEval "1+z+y+x+x*z+y*z+x*y+x*y*z" $ tSum [tInt 1,
                                               tProd [tVar "x",tVar "y",tVar "z"],
                                               tProd [tVar "x",tVar "y"],
                                               tProd [tVar "x",tVar "z"],
                                               tVar "x",
                                               tProd [tVar "y",tVar "z"],
                                               tVar "y",tVar "z"],
  testEval "a*(y+1)+b*(x+1)" $ tSum [tProd [tVar "a",tSum [tInt 1,tVar "y"]],
                                     tProd [tVar "b",tSum [tInt 1,tVar "x"]]],
  testEval "b*(x+1)+a*(y+1)" $ tSum [tProd [tVar "a",tSum [tInt 1,tVar "y"]],
                                     tProd [tVar "b",tSum [tInt 1,tVar "x"]]],
  testEval "a*b+a*2" $ tSum [tProd [tVar "a",tVar "b"],
                             tProd [tInt 2,tVar "a"]],
  testEval "a*(b*c)" $ tProd [tVar "a",tVar "b",tVar "c"],
  testEval "a+b*(c*d)" $ tSum [tVar "a",tProd [tVar "b",tVar "c",tVar "d"]],
  testEval "b*a" $ tProd [tVar "a",tVar "b"],
  testEval "a*(b+d*c)" $ tProd [tVar "a",
                                tSum [tVar "b",
                                      tProd [tVar "c",
                                             tVar "d"]]],
  testEval "a+b*(d+c)" $ tSum [tVar "a",
                               tProd [tVar "b",
                                      tSum [tVar "c",
                                            tVar "d"]]],
  testEval "1*1" $ tInt 1,
  testEval "1*1*1*(1*1*(1*(1*1)*1)*(1*1))*1" $ tInt 1,
  testEval "(-1)*(-1)*(-1)*((-1)*(-1)*((-1)*((-1)*(-1))*(-1))*((-1)*(-1)))*(-1) " $ tInt 1,
  testEval "a*(-1)*b*((-1)*c*((-1)*(d*(-1))*(-1))*((-1)*e))*(-1) " $ tProd [tInt (-1),tVar "a",tVar "b",tVar "c",tVar "d",tVar "e"],
  testEval "2*3" $ tInt 6,
  testEval "3*2" $ tInt 6,
  testEval "1*x" $ tVar "x",
  testEval "0*x" $ tInt 0,
  testEval "a+a" $ tProd [tInt 2,tVar "a"],
  testEval "a+2*a" $ tProd [tInt 3,tVar "a"],
  testEval "2*a+2*a" $ tProd [tInt 4,tVar "a"],
  testEval "3*a+5*a" $ tProd [tInt 8,tVar "a"],
  testEval "c+a+b+c+b+a+b+b+c+c+c+a+b+a+c" $ tSum [tProd [tInt 4,tVar "a"],
                                                   tProd [tInt 5,tVar "b"],
                                                   tProd [tInt 6,tVar "c"]],
  testEval "2*c+5*a+7*b+6*c+3*b+9*a+4*b+5*b+3*c+8*c+7*c+2*a+4*b+6*a+6*c" $
  tSum [tProd [tInt 22,tVar "a"],
        tProd [tInt 23,tVar "b"],
        tProd [tInt 32,tVar "c"]],
  testEval "(a+1)*(b+2)*c*(d+3)+(d+3)*5*(b+2)*c*(a+1)+4*(d+3)*c*(b+2)*(a+1)" $
  tProd [tInt 10,tVar "c",
         tSum [tInt 1,tVar "a"],
         tSum [tInt 2,tVar "b"],
         tSum [tInt 3,tVar "d"]],
  testEval "a^b" $ tPower (tVar "a",tVar "b")
  ]

testDisplay :: String -> String -> Test
testDisplay input output = displayExpr (unRight (parseAll expressionParser (map snd (unRight (parseAll tokenizer input))))) ~?= output

expressionDisplayTests = [
  testDisplay "3" "3",
  testDisplay "4" "4",
  testDisplay "-5" "-5",
  testDisplay "-8" "-8",
  testDisplay "x" "x",
  testDisplay "foo" "foo",
  testDisplay "ABCdef123" "ABCdef123",
  testDisplay "a+1" "a + 1",
  testDisplay "a+b" "a + b",
  testDisplay "b+a" "a + b",
  testDisplay "a*b" "a b",
  testDisplay "x*y" "x y",
  testDisplay "2*b" "2 b",
  testDisplay "b*2" "2 b",
  testDisplay "a*b+2*b" "a b + 2 b",
  testDisplay "a*(b+c)" "a (b + c)",
  testDisplay "(a+b)*(c+d)" "(a + b) (c + d)",
  testDisplay "(a+b)*c" "c (a + b)",
  testDisplay "(a+b)*(c+d)*(e+1)" "(a + b) (c + d) (e + 1)",
  testDisplay "a+1+1" "a + 2",
  testDisplay "3+7+c+b+a+5+d+12" "a + b + c + d + 27",
  testDisplay "a+0" "a",
  testDisplay "0" "0",
  testDisplay "0+0" "0",
  testDisplay "(0)" "0",
  testDisplay "(0+0)+(0+(0+0)+(0+0+(0+0))+0)+0" "0",
  testDisplay "(1+1)+(1+(1+1)+(1+1+(1+1))+1)+1" "11",
  testDisplay "(x+1)+y" "x + y + 1",
  testDisplay "(x+1)+y+1" "x + y + 2",
  testDisplay "x*2" $ "2 x",
  testDisplay "x*(a+1)" "x (a + 1)",
  testDisplay "x*(a+b)" "x (a + b)",
  testDisplay "x*(b+a)" "x (a + b)",
  testDisplay "x*(a+1+1)" "x (a + 2)",
  testDisplay "x*(3+7+c+b+a+5+d+12)" "x (a + b + c + d + 27)",
  testDisplay "x*(a+b+0)" "x (a + b)",
  testDisplay "x*(a+b+0+0)" "x (a + b)",
  testDisplay "x*(a+b+(0+0)+(0+(0+0)+(0+0+(0+0))+0)+0)" "x (a + b)",
  testDisplay "x*(a+(b+c))" "x (a + b + c)",
  testDisplay "a*b+c*d" "a b + c d",
  testDisplay "x*y+z" "x y + z",
  testDisplay "z+x*y" "x y + z",
  testDisplay "x*y+a" "a + x y",
  testDisplay "a+x*y" "a + x y",
  testDisplay "a*z+x" "a z + x",
  testDisplay "x+a*z" "a z + x",
  testDisplay "a*b+2*c" "a b + 2 c",
  testDisplay "c*2+a*b" "a b + 2 c",
  testDisplay "a*c+2*b" "a c + 2 b",
  testDisplay "b*2+a*c" "a c + 2 b",
  testDisplay "b*c+a*2" "2 a + b c",
  testDisplay "2*a+b*c" "2 a + b c",
  testDisplay "x*z+y*z+x*y+x*y*z" "x y z + x y + x z + y z",
  testDisplay "z+y+x+x*z+y*z+x*y+x*y*z" "x y z + x y + x z + x + y z + y + z",
  testDisplay "1+z+y+x+x*z+y*z+x*y+x*y*z" "x y z + x y + x z + x + y z + y + z + 1",
  testDisplay "a*(y+1)+b*(x+1)" "a (y + 1) + b (x + 1)",
  testDisplay "b*(x+1)+a*(y+1)" "a (y + 1) + b (x + 1)",
  testDisplay "a*b+a*2" "a b + 2 a",
  testDisplay "a*(b*c)" "a b c",
  testDisplay "a+b*(c*d)" "a + b c d",
  testDisplay "b*a" "a b",
  testDisplay "a*(b+d*c)" "a (b + c d)",
  testDisplay "a+b*(d+c)" "a + b (c + d)",
  testDisplay "1*1" "1",
  testDisplay "1*1*1*(1*1*(1*(1*1)*1)*(1*1))*1" "1",
  testDisplay "(-1)*(-1)*(-1)*((-1)*(-1)*((-1)*((-1)*(-1))*(-1))*((-1)*(-1)))*(-1)" "1",
  testDisplay "a*(-1)*b*((-1)*c*((-1)*(d*(-1))*(-1))*((-1)*e))*(-1) " "-a b c d e",
  testDisplay "2*3" "6",
  testDisplay "3*2" "6",
  testDisplay "1*x" "x",
  testDisplay "0*x" "0",
  testDisplay "a+a" "2 a",
  testDisplay "a+2*a" "3 a",
  testDisplay "2*a+2*a" "4 a",
  testDisplay "3*a+5*a" "8 a",
  testDisplay "c+a+b+c+b+a+b+b+c+c+c+a+b+a+c" "4 a + 5 b + 6 c",
  testDisplay "2*c+5*a+7*b+6*c+3*b+9*a+4*b+5*b+3*c+8*c+7*c+2*a+4*b+6*a+6*c" "22 a + 23 b + 32 c",
  testDisplay "(a+1)*(b+2)*c*(d+3)+(d+3)*5*(b+2)*c*(a+1)+4*(d+3)*c*(b+2)*(a+1)" "10 c (a + 1) (b + 2) (d + 3)",
  testDisplay "-a" "-a",
  testDisplay "-(a)" "-a",
  testDisplay "(-a)" "-a",
  testDisplay "-(-a)" "a",
  testDisplay "-(5)" "-5",
  testDisplay "(-5)" "-5",
  testDisplay "-(-5)" "5",
  testDisplay "-1*x" "-x",
  testDisplay "1*-x" "-x",
  testDisplay "-1*-x" "x",
  testDisplay "1*x" "x",
  testDisplay "-2*x" "-2 x",
  testDisplay "2*-x" "-2 x",
  testDisplay "-2*-x" "2 x",
  testDisplay "2*x" "2 x",
  testDisplay "x-(-1)" "x + 1",
  testDisplay "x-1" "x - 1",
  testDisplay "-x-1" "-x - 1",
  testDisplay "x+y+1" "x + y + 1",
  testDisplay "1*x+1*y+1" "x + y + 1",
  testDisplay "2*x+2*y+2" "2 x + 2 y + 2",
  testDisplay "-x-y-1" "-x - y - 1",
  testDisplay "-1*x-1*y-1" "-x - y - 1",
  testDisplay "-2*x-2*y-2" "-2 x - 2 y - 2",
  testDisplay "a^b" "a^b",
  testDisplay "a^b+c^d" "a^b + c^d",
  testDisplay "a^2+b" "a^2 + b",
  testDisplay "b+a^2" "a^2 + b",
  testDisplay "b^2+a" "a + b^2",
  testDisplay "a+b^2" "a + b^2",
  testDisplay "a*b^2" "a b^2",
  testDisplay "a^2*b" "a^2 b",
  testDisplay "2*x^2" "2 x^2",
  testDisplay "x^2*2" "2 x^2",
  testDisplay "(x+1)*y^2" "y^2 (x + 1)",
  testDisplay "(y+1)*x^2" "x^2 (y + 1)",
  testDisplay "x*y+z^2" "x y + z^2",
  testDisplay "y*z+x^2" "x^2 + y z",
  testDisplay "2+x^2" "x^2 + 2",
  testDisplay "x^2+2" "x^2 + 2",
  testDisplay "(x*y)^2" "x^2 y^2",
  testDisplay "2^2" "4"
  ]

storeTests = [
  getValue "a" newStore ~?= Nothing,
  getValue "a" (setValue "a" (tInt 42) newStore) ~?= Just (tInt 42),
  getValue "b" (setValue "a" (tInt 42) newStore) ~?= Nothing,
  getValue "a" (setValue "a" (tVar "x") (setValue "a" (tInt 11) newStore)) ~?= Just (tVar "x"),
  getValue "a" (setValue "b" (tVar "x") (setValue "a" (tInt 11) newStore)) ~?= Just (tInt 11),
  getValue "a" (setValue "a" (tVar "x") (setValue "b" (tInt 11) newStore)) ~?= Just (tVar "x")
  ]

tests = test (map ("tokenizer" ~:) tokenizerTests ++
              map ("expression parser" ~:) expressionParserTests ++
              map ("expression display" ~:) expressionDisplayTests ++
              map ("store" ~:) storeTests)

main = runTestTT tests
